@model IEnumerable<RESToran.Models.ReservationPeriod>

@{
    ViewData["Title"] = "Index";
    Restaurant restaurant = ViewBag.Restaurant;
    List<Table> tables_list = new List<Table>();
    @foreach (Table t in ViewBag.Tables)
    {
        tables_list.Add(t);
    }
}
<link href="~/css/ReservationPeriod_list.css" rel="stylesheet" type="text/css">
<h2>@restaurant.Name Reservations</h2>
<p>
    <a class="float-right ml-2 float-right btn btn-dark" role="button" aria-disabled="true" asp-controller="Restaurant" asp-action="Details" asp-route-id="@restaurant.Id">Restaurant homepage</a>
    <a class="float-right float-right btn btn-dark" role="button" aria-disabled="true" asp-action="Create" asp-route-id="@restaurant.Id">New Reservation</a>
</p>
<div class="mt-50 mb-50">
    <label>Search by date:</label>
    <input id="fil_date" type="date" onchange="filterDate()" />
</div>
<div class="mt-50 mb-50">
    <label>
        List of tables:
    </label>
    <ul>
        @foreach (var t in tables_list)
        {
            <li>@t.Description</li>
        }
    </ul>
</div>
<table id="my_table" class="table table-striped table-hover mt-50">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TableDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndTime)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TableDescription)
                </td>
                <td name="da">
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndTime)
                </td>
                <td>
                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    function filterDate() {
        var input, table, tr, td, i, txtValue, dayz, monz, yearz, days, mons, years, val;
        input = document.getElementById("fil_date").value;
        years = input.substring(0, 4);
        mons = input.substring(5, 7);
        days = input.substring(8, 10);

        table = document.getElementById("my_table");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {

            td = tr[i].getElementsByTagName("td")[1];
            if (td) {
                txtValue = td.textContent || td.innerText;
                val = JSON.stringify(txtValue);
                dayz = val.substring(23, 25);
                monz = val.substring(26, 28);
                yearz = val.substring(29, 33);
                if (days == dayz && mons == monz && years == yearz) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
        sortTable();
    }
</script>

<script>
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("my_table");
        switching = true;
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }
</script>


